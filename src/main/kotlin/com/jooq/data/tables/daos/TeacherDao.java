/*
 * This file is generated by jOOQ.
 */
package com.jooq.data.tables.daos;


import com.jooq.data.tables.Teacher;
import com.jooq.data.tables.records.TeacherRecord;

import java.util.List;
import java.util.Optional;

import org.jooq.Configuration;
import org.jooq.impl.DAOImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class TeacherDao extends DAOImpl<TeacherRecord, com.jooq.data.tables.pojos.Teacher, Integer> {

    /**
     * Create a new TeacherDao without any configuration
     */
    public TeacherDao() {
        super(Teacher.TEACHER, com.jooq.data.tables.pojos.Teacher.class);
    }

    /**
     * Create a new TeacherDao with an attached configuration
     */
    public TeacherDao(Configuration configuration) {
        super(Teacher.TEACHER, com.jooq.data.tables.pojos.Teacher.class, configuration);
    }

    @Override
    public Integer getId(com.jooq.data.tables.pojos.Teacher object) {
        return object.getId();
    }

    /**
     * Fetch records that have <code>id BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<com.jooq.data.tables.pojos.Teacher> fetchRangeOfId(Integer lowerInclusive, Integer upperInclusive) {
        return fetchRange(Teacher.TEACHER.ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>id IN (values)</code>
     */
    public List<com.jooq.data.tables.pojos.Teacher> fetchById(Integer... values) {
        return fetch(Teacher.TEACHER.ID, values);
    }

    /**
     * Fetch a unique record that has <code>id = value</code>
     */
    public com.jooq.data.tables.pojos.Teacher fetchOneById(Integer value) {
        return fetchOne(Teacher.TEACHER.ID, value);
    }

    /**
     * Fetch a unique record that has <code>id = value</code>
     */
    public Optional<com.jooq.data.tables.pojos.Teacher> fetchOptionalById(Integer value) {
        return fetchOptional(Teacher.TEACHER.ID, value);
    }

    /**
     * Fetch records that have <code>name BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<com.jooq.data.tables.pojos.Teacher> fetchRangeOfName(String lowerInclusive, String upperInclusive) {
        return fetchRange(Teacher.TEACHER.NAME, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>name IN (values)</code>
     */
    public List<com.jooq.data.tables.pojos.Teacher> fetchByName(String... values) {
        return fetch(Teacher.TEACHER.NAME, values);
    }

    /**
     * Fetch records that have <code>age BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<com.jooq.data.tables.pojos.Teacher> fetchRangeOfAge(Integer lowerInclusive, Integer upperInclusive) {
        return fetchRange(Teacher.TEACHER.AGE, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>age IN (values)</code>
     */
    public List<com.jooq.data.tables.pojos.Teacher> fetchByAge(Integer... values) {
        return fetch(Teacher.TEACHER.AGE, values);
    }
}
