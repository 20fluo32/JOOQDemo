/*
 * This file is generated by jOOQ.
 */
package com.jooq.data.tables.pojos;


import com.jooq.data.tables.interfaces.ITeacher;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Teacher implements ITeacher {

    private static final long serialVersionUID = 1L;

    private Integer id;
    private String name;
    private Integer age;

    public Teacher() {}

    public Teacher(ITeacher value) {
        this.id = value.getId();
        this.name = value.getName();
        this.age = value.getAge();
    }

    public Teacher(
        Integer id,
        String name,
        Integer age
    ) {
        this.id = id;
        this.name = name;
        this.age = age;
    }

    /**
     * Getter for <code>school.teacher.id</code>.
     */
    @Override
    public Integer getId() {
        return this.id;
    }

    /**
     * Setter for <code>school.teacher.id</code>.
     */
    @Override
    public void setId(Integer id) {
        this.id = id;
    }

    /**
     * Getter for <code>school.teacher.name</code>.
     */
    @Override
    public String getName() {
        return this.name;
    }

    /**
     * Setter for <code>school.teacher.name</code>.
     */
    @Override
    public void setName(String name) {
        this.name = name;
    }

    /**
     * Getter for <code>school.teacher.age</code>.
     */
    @Override
    public Integer getAge() {
        return this.age;
    }

    /**
     * Setter for <code>school.teacher.age</code>.
     */
    @Override
    public void setAge(Integer age) {
        this.age = age;
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj)
            return true;
        if (obj == null)
            return false;
        if (getClass() != obj.getClass())
            return false;
        final Teacher other = (Teacher) obj;
        if (this.id == null) {
            if (other.id != null)
                return false;
        }
        else if (!this.id.equals(other.id))
            return false;
        if (this.name == null) {
            if (other.name != null)
                return false;
        }
        else if (!this.name.equals(other.name))
            return false;
        if (this.age == null) {
            if (other.age != null)
                return false;
        }
        else if (!this.age.equals(other.age))
            return false;
        return true;
    }

    @Override
    public int hashCode() {
        final int prime = 31;
        int result = 1;
        result = prime * result + ((this.id == null) ? 0 : this.id.hashCode());
        result = prime * result + ((this.name == null) ? 0 : this.name.hashCode());
        result = prime * result + ((this.age == null) ? 0 : this.age.hashCode());
        return result;
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder("Teacher (");

        sb.append(id);
        sb.append(", ").append(name);
        sb.append(", ").append(age);

        sb.append(")");
        return sb.toString();
    }

    // -------------------------------------------------------------------------
    // FROM and INTO
    // -------------------------------------------------------------------------

    @Override
    public void from(ITeacher from) {
        setId(from.getId());
        setName(from.getName());
        setAge(from.getAge());
    }

    @Override
    public <E extends ITeacher> E into(E into) {
        into.from(this);
        return into;
    }
}
