/*
 * This file is generated by jOOQ.
 */
package com.jooq.data.tables;


import com.jooq.data.Keys;
import com.jooq.data.School;
import com.jooq.data.tables.records.TeacherDetailsRecord;

import java.util.Collection;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class TeacherDetails extends TableImpl<TeacherDetailsRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>school.teacher_details</code>
     */
    public static final TeacherDetails TEACHER_DETAILS = new TeacherDetails();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<TeacherDetailsRecord> getRecordType() {
        return TeacherDetailsRecord.class;
    }

    /**
     * The column <code>school.teacher_details.teacher_id</code>.
     */
    public final TableField<TeacherDetailsRecord, Integer> TEACHER_ID = createField(DSL.name("teacher_id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>school.teacher_details.address</code>.
     */
    public final TableField<TeacherDetailsRecord, String> ADDRESS = createField(DSL.name("address"), SQLDataType.VARCHAR(50), this, "");

    /**
     * The column <code>school.teacher_details.salary</code>.
     */
    public final TableField<TeacherDetailsRecord, Integer> SALARY = createField(DSL.name("salary"), SQLDataType.INTEGER, this, "");

    private TeacherDetails(Name alias, Table<TeacherDetailsRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private TeacherDetails(Name alias, Table<TeacherDetailsRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>school.teacher_details</code> table reference
     */
    public TeacherDetails(String alias) {
        this(DSL.name(alias), TEACHER_DETAILS);
    }

    /**
     * Create an aliased <code>school.teacher_details</code> table reference
     */
    public TeacherDetails(Name alias) {
        this(alias, TEACHER_DETAILS);
    }

    /**
     * Create a <code>school.teacher_details</code> table reference
     */
    public TeacherDetails() {
        this(DSL.name("teacher_details"), null);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : School.SCHOOL;
    }

    @Override
    public Identity<TeacherDetailsRecord, Integer> getIdentity() {
        return (Identity<TeacherDetailsRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<TeacherDetailsRecord> getPrimaryKey() {
        return Keys.KEY_TEACHER_DETAILS_PRIMARY;
    }

    @Override
    public TeacherDetails as(String alias) {
        return new TeacherDetails(DSL.name(alias), this);
    }

    @Override
    public TeacherDetails as(Name alias) {
        return new TeacherDetails(alias, this);
    }

    @Override
    public TeacherDetails as(Table<?> alias) {
        return new TeacherDetails(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public TeacherDetails rename(String name) {
        return new TeacherDetails(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public TeacherDetails rename(Name name) {
        return new TeacherDetails(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public TeacherDetails rename(Table<?> name) {
        return new TeacherDetails(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public TeacherDetails where(Condition condition) {
        return new TeacherDetails(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public TeacherDetails where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public TeacherDetails where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public TeacherDetails where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public TeacherDetails where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public TeacherDetails where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public TeacherDetails where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public TeacherDetails where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public TeacherDetails whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public TeacherDetails whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
